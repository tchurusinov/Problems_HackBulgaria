# FRACTIONS

from math import gcd, lcm


class Fraction:
    def __init__(self, numerator, denominator):
        self.numerator = numerator
        self.denominator = denominator

        if denominator == 0:
            raise ValueError("Denominator cannot be 0")

    def __str__(self):
        if self.numerator == 0:
            return "0"
        return f"{self.numerator}/{self.denominator}"

    def __repr__(self):
        return f"Fraction({self.numerator}, {self.denominator})"

    def __eq__(self, other):

        if not isinstance(other, Fraction):
            raise TypeError(f"{other} is not a Fraction bby")

        self_gcd = gcd(self.numerator, self.denominator)
        other_gcd = gcd(other.numerator, other.denominator)

        return (
                self.numerator // self_gcd == other.numerator // other_gcd
                and
                self.denominator // self_gcd == other.denominator // other_gcd
        )

    def __add__(self, other):

        if not isinstance(other, Fraction):
            raise TypeError(f"{other} is not a Fraction bby")

        new_denominator = lcm(self.denominator, other.denominator)
        x = new_denominator // self.denominator
        y = new_denominator // other.denominator

        return Fraction(self.numerator * x + other.numerator * y, new_denominator)

    def __sub__(self, other):

        if not isinstance(other, Fraction):
            raise TypeError(f"{other} is not a Fraction bby")

        new_denominator = lcm(self.denominator, other.denominator)
        x = new_denominator // self.denominator
        y = new_denominator // other.denominator

        return Fraction(self.numerator * x - other.numerator * y, new_denominator)

    def __mul__(self, other):

        if not isinstance(other, Fraction):
            raise TypeError(f"{other} is not a Fraction bby")

        return Fraction(
            self.numerator * other.numerator,
            self.denominator * other.denominator
        )

    def __lt__(self, other):

        if not isinstance(other, Fraction):
            raise TypeError(f"{other} is not a Fraction bby")

        new_denominator = lcm(self.denominator, other.denominator)
        x = new_denominator // self.denominator
        y = new_denominator // other.denominator

        return self.numerator * x < other.numerator * y

    def simplify(self):

        if self.numerator == 0:
            return Fraction(
                self.numerator,
                self.denominator
            )

        self_gcd = gcd(self.numerator, self.denominator)

        return Fraction(
            self.numerator // self_gcd,
            self.denominator // self_gcd
        )

    def is_simplified(self):

        return self.numerator == 0 or gcd(self.numerator, self.denominator) == 1


##########################################################################################

# FRACTIONS TESTS

import unittest

from es import Fraction


class DummyFraction:
    def __init__(self, numerator, denominator):
        self.numerator = numerator
        self.denominator = denominator


class FractionTests(unittest.TestCase):
    # THIS WILL EXIT ON THE FIRST CASE (CUZ FALSE) AND WILL NOT REACH THE SECOND CASE
    # def test_without_subtest(self):
    #   self.assertEqual(1, 2)
    #   self.assertEqual(2, 1)

    # THIS WILL GO THROUGH BOTH CASES
    # def test_with_subtest(self):
    # with self.subTest("This is case 1"):
    # self.assertEqual(1, 2)
    # with self.subTest("This is case 2"):
    # self.assertEqual(2, 1)

    # for i in range(5, 10):
    # with self.subTest(f"This is case {i}"):
    # self.assertEqual(i, 5)
    def test_fraction_init(self):
        with self.subTest("Happy case"):
            fraction = Fraction(1, 2)

            self.assertEqual(1, fraction.numerator)
            self.assertEqual(2, fraction.denominator)

        with self.subTest("Denominator == 0 raises error"):
            with self.assertRaises(ValueError):
                Fraction(1, 0)

    def test_str(self):
        cases = [
            (Fraction(1, 2), "1/2"),
            (Fraction(1, 1), "1/1"),
            (Fraction(2, 1), "2/1"),
            (Fraction(2, 4), "2/4"),
            (Fraction(0, 1), "0")
        ]

        for obj, expected in cases:
            with self.subTest(f"Expected {expected}"):
                self.assertEqual(expected, str(obj))

    def test_repr(self):
        cases = [
            (Fraction(1, 2), "Fraction(1, 2)"),
            (Fraction(1, 1), "Fraction(1, 1)"),
            (Fraction(2, 1), "Fraction(2, 1)"),
            (Fraction(2, 4), "Fraction(2, 4)"),
            (Fraction(0, 1), "Fraction(0, 1)")
        ]

        for obj, expected in cases:
            with self.subTest(f"Expected {expected}"):
                self.assertEqual(expected, repr(obj))

    def test_eq(self):
        with self.subTest("Happy cases"):
            a = Fraction(1, 2)
            b = Fraction(1, 2)
            c = Fraction(1, 3)

            self.assertEqual(a, a)
            self.assertEqual(a, b)
            self.assertEqual(b, a)

            self.assertNotEqual(a, c)
            self.assertNotEqual(c, a)

            self.assertNotEqual(b, c)
            self.assertNotEqual(c, b)

        with self.subTest("Fractions are equal even unsimplified"):
            a = Fraction(1, 2)
            b = Fraction(2, 4)

            self.assertEqual(a, b)
            self.assertEqual(b, a)

        with self.subTest("Fractions that are 0 are equal"):
            a = Fraction(0, 1)
            b = Fraction(0, 2)

            self.assertEqual(a, b)
            self.assertEqual(b, a)

        with self.subTest("Fractions are equal only if instance of Fraction"):

            a = Fraction(1, 2)
            b = DummyFraction(1, 2)

            with self.assertRaises(TypeError):
                a == b

    def test_add(self):

        with self.subTest("Same denominator"):
            a = Fraction(1, 2)
            b = Fraction(3, 2)
            expected = Fraction(4, 2)

            self.assertEqual(expected, a + b)
            self.assertEqual(expected, b + a)

        with self.subTest("Different denominator"):
            a = Fraction(4, 5)
            b = Fraction(3, 4)
            expected = Fraction(31, 20)

            self.assertEqual(expected, a + b)
            self.assertEqual(expected, b + a)

        with self.subTest("Zero"):
            a = Fraction(4, 5)
            b = Fraction(0, 3)
            expected = Fraction(4, 5)

            self.assertEqual(expected, a + b)
            self.assertEqual(expected, b + a)

        with self.subTest("Dummy Fraction"):
            a = Fraction(4, 5)
            b = DummyFraction(3, 4)

            with self.assertRaises(TypeError):
                a + b

    def test_sub(self):

        with self.subTest("Same denominator"):
            a = Fraction(1, 2)
            b = Fraction(3, 2)

            a_minus_b_expected = Fraction(-2, 2)
            b_minus_a_expected = Fraction(2, 2)

            self.assertEqual(a_minus_b_expected, a - b)
            self.assertEqual(b_minus_a_expected, b - a)

        with self.subTest("Different denominator"):
            a = Fraction(4, 5)
            b = Fraction(3, 4)

            a_minus_b_expected = Fraction(1, 20)
            b_minus_a_expected = Fraction(-1, 20)

            self.assertEqual(a_minus_b_expected, a - b)
            self.assertEqual(b_minus_a_expected, b - a)

        with self.subTest("Zero"):
            a = Fraction(4, 5)
            b = Fraction(0, 3)

            a_minus_b_expected = Fraction(12, 15)
            b_minus_a_expected = Fraction(-12, 15)

            self.assertEqual(a_minus_b_expected, a - b)
            self.assertEqual(b_minus_a_expected, b - a)

        with self.subTest("Dummy Fraction"):
            a = Fraction(4, 5)
            b = DummyFraction(3, 4)

            with self.assertRaises(TypeError):
                a + b

    def test_multiply(self):

        with self.subTest("Happy case"):
            a = Fraction(4, 5)
            b = Fraction(3, 4)
            expected = Fraction(12, 20)

            self.assertEqual(expected, a * b)
            self.assertEqual(expected, b * a)

        with self.subTest("Zero"):
            a = Fraction(4, 5)
            b = Fraction(0, 3)
            expected = Fraction(0, 1)

            self.assertEqual(expected, a * b)
            self.assertEqual(expected, b * a)

        with self.subTest("One"):
            a = Fraction(4, 5)
            b = Fraction(1, 1)
            expected = Fraction(4, 5)

            self.assertEqual(expected, a * b)
            self.assertEqual(expected, b * a)

        with self.subTest("Unsimplified One"):
            a = Fraction(4, 5)
            b = Fraction(2, 2)
            expected = Fraction(8, 10)

            self.assertEqual(expected, a * b)
            self.assertEqual(expected, b * a)

        with self.subTest("Dummy Fraction"):
            a = Fraction(4, 5)
            b = DummyFraction(3, 4)

            with self.assertRaises(TypeError):
                a * b

    def test_simplification(self):

        with self.subTest("Simplified fractions are simplified"):
            a = Fraction(1, 2)
            simplified = a.simplify()

            self.assertEqual(a, simplified)
            self.assertTrue(a.is_simplified())
            self.assertTrue(simplified.is_simplified())

            self.assertEqual(a.numerator, simplified.numerator)
            self.assertEqual(a.denominator, simplified.denominator)

        with self.subTest("Can simplify fraction"):
            a = Fraction(2, 4)
            simplified = a.simplify()

            self.assertEqual(a, simplified)
            self.assertFalse(a.is_simplified())
            self.assertTrue(simplified.is_simplified())

            self.assertEqual(1, simplified.numerator)
            self.assertEqual(2, simplified.denominator)

        with self.subTest("Zero"):
            a = Fraction(0, 3)
            simplified = a.simplify()

            self.assertEqual(a, simplified)
            self.assertFalse(a.is_simplified())
            self.assertTrue(simplified.is_simplified())

            self.assertEqual(1, simplified.numerator)
            self.assertEqual(2, simplified.denominator)

    def test_ordering(self):

        with self.subTest("Same denominator"):
            a = Fraction(1, 5)
            b = Fraction(2, 5)

            self.assertTrue(a < b)
            self.assertFalse(a > b)
            self.assertFalse(a == b)

        with self.subTest("Different denominator"):
            a = Fraction(1, 2)
            b = Fraction(3, 4)

            self.assertTrue(a < b)
            self.assertFalse(a > b)
            self.assertFalse(a == b)

        with self.subTest("Zero"):
            a = Fraction(0, 2)
            b = Fraction(3, 4)
            c = Fraction(-3, 4)

            self.assertTrue(a < b)
            self.assertTrue(c < a)
            self.assertTrue(c < b)

        with self.subTest("Dummy fraction"):
            a = Fraction(1, 2)
            b = DummyFraction(3, 4)

            with self.assertRaises(TypeError):
                a < b

        with self.subTest("Sorting"):

            self.assertEqual(
                sorted([Fraction(3, 4), Fraction(1, 2)]),
                [Fraction(1, 2), Fraction(3, 4)]
            )




