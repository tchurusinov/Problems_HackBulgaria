# INTERVAL EXTENDED

class Interval:
    def __init__(self, start, end, start_opened=False, end_opened=False):
        self.start = start
        self.end = end
        self.start_opened = start_opened
        self.end_opened = end_opened

    def is_inside(self, value):
        if self.start_opened == False and self.end_opened == False:
            return self.start <= value <= self.end

        if self.start_opened and self.end_opened == False:
            if value == self.start:
                return False
            else:
                return self.start <= value <= self.end

        if self.start_opened == False and self.end_opened:
            if value == self.end:
                return False
            else:
                return self.start <= value <= self.end

        if self.start_opened and self.end_opened:
            if value == self.start or value == self.end:
                return False
            else:
                return self.start <= value <= self.end

    def stringify(self):
        if self.start_opened:
            start_symbol = "("
        else:
            start_symbol = "["

        if self.end_opened:
            end_symbol = ")"
        else:
            end_symbol = "]"

        return f"{start_symbol}{self.start}, {self.end}{end_symbol}"


interval = Interval(1, 10, True, True)

print(interval.stringify())
print(interval.is_inside(1))
print(interval.is_inside(5))
print(interval.is_inside(10))

