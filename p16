# NOKIA KEYPAD

def group(items):
    result = []
    length = len(items)
    index = 0

    while index < length:
        item = items[index]
        current_group = [item]
        lookup_index = index + 1

        while lookup_index < length and items[lookup_index] == item:
            current_group.append(items[lookup_index])
            lookup_index += 1

        result.append(current_group)
        index = lookup_index

    return result


KEYPAD = {
    2: "abc",
    3: "def",
    4: "ghi",
    5: "jkl",
    6: "mno",
    7: "pqrs",
    8: "tuv",
    9: "wxyz"
}


def numbers_to_message(pressed_sequence):
    letters = []
    grouped_pressed_sequence = group(pressed_sequence)
    upper = False

    for grouped in grouped_pressed_sequence:
        key = grouped[0]
        times_pressed = len(grouped)

        if key == -1:
            continue

        if key == 1:
            upper = True
            continue

        if key == 0:
            letters.append(" " * times_pressed)

        sequence = KEYPAD[key]
        letter = sequence[(times_pressed - 1) % len(sequence)]

        if upper:
            letter = letter.upper()
            upper = False

        letters.append(letter)

    return "".join(letters)


#print(numbers_to_message([2, -1, 2, 2, -1, 2, 2, 2]))
#print(numbers_to_message([2, 2, 2, 2]))
#print(numbers_to_message([1, 4, 4, 4, 8, 8, 8, 6, 6, 6, 0, 3, 3, 0, 1, 7, 7, 7, 7, 7, 2, 6, 6, 3, 2]))

SEQUENCES = {
    "a": [2],
    "b": [2, 2],
    "c": [2, 2, 2],
    "d": [3],
    "e": [3, 3],
    "f": [3, 3, 3],
    "g": [4],
    "h": [4, 4],
    "i": [4, 4, 4],
    "j": [5],
    "k": [5, 5],
    "l": [5, 5, 5],
    "m": [6],
    "n": [6, 6],
    "o": [6, 6, 6],
    "p": [7],
    "q": [7, 7],
    "r": [7, 7, 7],
    "s": [7, 7, 7, 7],
    "t": [8],
    "u": [8, 8],
    "v": [8, 8, 8],
    "w": [9],
    "x": [9, 9],
    "y": [9, 9, 9],
    "z": [9, 9, 9, 9],
    " ": [0]
}


def message_to_numbers(message):
    sequence = []

    for char in message:
        if char.isupper():
            sequence.append(1)

        shortest_sequence = SEQUENCES[char.lower()]

        if len(sequence) > 0:
            previous_key = sequence[len(sequence) - 1]

            if previous_key == shortest_sequence[0]:
                sequence.append(-1)

        sequence.extend(shortest_sequence)

    return sequence


print(message_to_numbers("abc"))
print(message_to_numbers("Ivo e Panda"))
